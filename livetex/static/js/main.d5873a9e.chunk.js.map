{"version":3,"sources":["App.js","index.js"],"names":["Line","Formula","formula","this","props","nextProps","nextState","React","Component","App","state","text","formulas","handleChange","bind","event","setState","target","value","split","className","Container","Segment","Form","TextArea","rows","placeholder","onChange","Provider","map","ReactDOM","render","document","getElementById"],"mappings":"4SAMMA,G,8KAEF,OACE,cAAC,IAAQC,QAAT,CAAiBC,QAAU,MAAQC,KAAKC,MAAMF,QAAU,U,4CAItCG,EAAWC,GAE/B,OAAOH,KAAKC,MAAMF,UAAYG,EAAUH,Y,GATzBK,IAAMC,YA0DVC,E,kDA5Cb,WAAYL,GAAQ,IAAD,8BACjB,cAAMA,IAEDM,MAAQ,CACXC,KAAM,GACNC,SAAU,IAGZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBARH,E,yDAYNC,GACXZ,KAAKa,SAAS,CAAEL,KAAMI,EAAME,OAAOC,QACnCf,KAAKa,SAAS,CAAEJ,SAAUG,EAAME,OAAOC,MAAMC,MAAM,e,+BAInD,OACE,qBAAKC,UAAU,MAAf,SACE,eAACC,EAAA,EAAD,CAAWV,MAAI,EAAf,UACE,cAACW,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACEC,KAAM,EACNC,YAAY,kBACZR,MAAOf,KAAKO,MAAMC,KAClBgB,SAAUxB,KAAKU,mBAIrB,cAACS,EAAA,EAAD,UACE,cAAC,IAAQM,SAAT,UACGzB,KAAKO,MAAME,SAASiB,KAAI,SAAAlB,GAAI,OAC3B,cAAC,EAAD,CAAMT,QAASS,oB,GAnCbJ,IAAMC,WCbxBsB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d5873a9e.chunk.js","sourcesContent":["import React from 'react';\nimport MathJax from 'mathjax3-react';\nimport { Container, Segment, Form, TextArea } from 'semantic-ui-react';\nimport './App.css';\n\n// dynamically create lines to make multi-line equations\nclass Line extends React.Component {\n  render () {\n    return (\n      <MathJax.Formula formula={ \"$$ \" + this.props.formula + \" $$\"} />\n    )\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // improve rendering speed by not re-rendering needlessly\n    return this.props.formula !== nextProps.formula;\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      text: \"\",\n      formulas: [],\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  // update LaTeX in a controlled component\n  handleChange(event) {\n    this.setState({ text: event.target.value });\n    this.setState({ formulas: event.target.value.split(/(?:\\n)/g) });  \n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Container text>\n          <Segment>\n            <Form>\n              <TextArea\n                rows={5}\n                placeholder=\"Type LaTeX here\"\n                value={this.state.text}\n                onChange={this.handleChange}\n              />\n            </Form>\n          </Segment>\n          <Segment>\n            <MathJax.Provider>\n              {this.state.formulas.map(text => (\n                <Line formula={text}/>\n              ))}\n            </MathJax.Provider>\n          </Segment>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}